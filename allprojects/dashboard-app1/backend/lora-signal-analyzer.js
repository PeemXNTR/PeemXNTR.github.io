const mongoose = require('mongoose');
const express = require('express');
const router = express.Router();
const cors = require('cors');

// ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö MongoDB
mongoose.connect('mongodb://localhost:27017/peem', {
  useNewUrlParser: true,
  useUnifiedTopology: true
})
.then(() => console.log('‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MongoDB ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à'))
.catch(err => console.error('‚ùå ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MongoDB ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:', err));

// ‡∏Å‡∏≥‡∏´‡∏ô‡∏î Schema ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö locations
const LocationSchema = new mongoose.Schema({
  location: {
    type: {
      type: String,
      enum: ['Point'],
      required: true
    },
    coordinates: {
      type: [Number], // [longitude, latitude]
      required: true
    }
  },
  timestamp: { type: Date, default: Date.now },
  additionalInfo: {
    type: Map,
    of: mongoose.Schema.Types.Mixed,
    default: {}
  }
});

// ‡∏Å‡∏≥‡∏´‡∏ô‡∏î Schema ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö pois
const POISchema = new mongoose.Schema({
  name: {
    type: String,
    required: true,
    unique: true
  },
  description: {
    type: String,
    default: ''
  },
  location: {
    type: {
      type: String,
      enum: ['Point'],
      required: true
    },
    coordinates: {
      type: [Number], // [longitude, latitude]
      required: true
    }
  },
  category: {
    type: String,
    enum: ['building', 'landmark', 'restaurant', 'office', 'parking', 'other'],
    default: 'other'
  },
  details: {
    type: Map,
    of: mongoose.Schema.Types.Mixed,
    default: {}
  },
  createdAt: { type: Date, default: Date.now }
});

// ‡∏™‡∏£‡πâ‡∏≤‡∏á Geospatial Index
LocationSchema.index({ location: '2dsphere' });
POISchema.index({ location: '2dsphere' });

// ‡∏™‡∏£‡πâ‡∏≤‡∏á Model
const Location = mongoose.model('Location', LocationSchema);
const POI = mongoose.model('POI', POISchema);

// ‡∏™‡∏£‡πâ‡∏≤‡∏á Schema ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì LoRa
const LoraSignalSchema = new mongoose.Schema({
  location: {
    type: {
      type: String,
      enum: ['Point'],
      required: true
    },
    coordinates: {
      type: [Number], // [longitude, latitude]
      required: true
    }
  },
  locationName: {
    type: String,
    required: true
  },
  timestamp: { 
    type: Date, 
    default: Date.now 
  },
  signalStrength: {
    type: Number,
    required: true
  },
  signalQuality: {
    type: String,
    enum: ['‡∏î‡∏µ‡∏°‡∏≤‡∏Å', '‡∏î‡∏µ', '‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á', '‡∏≠‡πà‡∏≠‡∏ô', '‡πÅ‡∏¢‡πà'],
    required: true
  },
  distanceMeters: {
    type: Number,
    required: true
  },
  nearestPOI: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'POI'
  },
  poiDistance: {
    type: Number
  }
});

LoraSignalSchema.index({ location: '2dsphere' });
const LoraSignal = mongoose.model('LoraSignal', LoraSignalSchema);

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏™‡∏≠‡∏á‡∏û‡∏¥‡∏Å‡∏±‡∏î (Haversine formula)
function calculateDistance(lat1, lon1, lat2, lon2) {
  const R = 6371; // ‡∏£‡∏±‡∏®‡∏°‡∏µ‡∏Ç‡∏≠‡∏á‡πÇ‡∏•‡∏Å‡πÉ‡∏ô‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Å‡∏¥‡πÇ‡∏•‡πÄ‡∏°‡∏ï‡∏£
  const dLat = deg2rad(lat2 - lat1);
  const dLon = deg2rad(lon2 - lon1);
  const a = 
    Math.sin(dLat/2) * Math.sin(dLat/2) +
    Math.cos(deg2rad(lat1)) * Math.cos(deg2rad(lat2)) * 
    Math.sin(dLon/2) * Math.sin(dLon/2); 
  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a)); 
  const distance = R * c; // ‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡πÉ‡∏ô‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Å‡∏¥‡πÇ‡∏•‡πÄ‡∏°‡∏ï‡∏£
  return distance * 1000; // ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏°‡∏ï‡∏£
}

function deg2rad(deg) {
  return deg * (Math.PI/180);
}

// ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏£‡∏á‡∏Ç‡∏≠‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì LoRa ‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á
function calculateSignalStrength(distanceMeters, heightAdvantage = false) {
  // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏£‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô (dBm)
  const baseSignalStrength = -30;
  
  // ‡∏™‡∏π‡∏ï‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏£‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏ï‡∏≤‡∏°‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á (‡∏™‡∏°‡∏°‡∏ï‡∏¥)
  // ‡∏•‡∏î‡∏•‡∏á 3 dBm ‡∏ó‡∏∏‡∏Å 100 ‡πÄ‡∏°‡∏ï‡∏£
  let signalStrength = baseSignalStrength - (3 * (distanceMeters / 100));
  
  // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏î‡πâ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡∏î‡πâ‡∏≤‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á ‡∏à‡∏∞‡∏°‡∏µ‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏î‡∏µ‡∏Ç‡∏∂‡πâ‡∏ô 5 dBm
  if (heightAdvantage) {
    signalStrength += 5;
  }
  
  // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ç‡∏µ‡∏î‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏•‡πà‡∏≤‡∏á (-120 dBm ‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏ó‡∏µ‡πà‡∏≠‡πà‡∏≠‡∏ô‡∏°‡∏≤‡∏Å)
  return Math.max(-120, signalStrength);
}

// ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏à‡∏≤‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏£‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì
function evaluateSignalQuality(signalStrength) {
  if (signalStrength >= -60) {
    return {
      quality: '‡∏î‡∏µ‡∏°‡∏≤‡∏Å',
      description: '‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡πÅ‡∏£‡∏á‡∏°‡∏≤‡∏Å ‡∏Å‡∏≤‡∏£‡∏™‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏£‡πÄ‡∏™‡∏ñ‡∏µ‡∏¢‡∏£‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î'
    };
  } else if (signalStrength >= -80) {
    return {
      quality: '‡∏î‡∏µ',
      description: '‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡πÅ‡∏£‡∏á ‡∏Å‡∏≤‡∏£‡∏™‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏£‡πÄ‡∏™‡∏ñ‡∏µ‡∏¢‡∏£'
    };
  } else if (signalStrength >= -100) {
    return {
      quality: '‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á',
      description: '‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á ‡∏≠‡∏≤‡∏à‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏™‡∏π‡∏ç‡∏´‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡πâ‡∏≤‡∏á'
    };
  } else if (signalStrength >= -110) {
    return {
      quality: '‡∏≠‡πà‡∏≠‡∏ô',
      description: '‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏≠‡πà‡∏≠‡∏ô ‡∏°‡∏±‡∏Å‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏™‡∏π‡∏ç‡∏´‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•'
    };
  } else {
    return {
      quality: '‡πÅ‡∏¢‡πà',
      description: '‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡πÅ‡∏¢‡πà‡∏°‡∏≤‡∏Å ‡∏Å‡∏≤‡∏£‡∏™‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏£‡πÑ‡∏°‡πà‡πÄ‡∏™‡∏ñ‡∏µ‡∏¢‡∏£ ‡∏≠‡∏≤‡∏à‡∏Ç‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠'
    };
  }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì LoRa
async function analyzeLoraSignals() {
  try {
    console.log('üì° ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì LoRa...');
    
    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    const locations = await Location.find().sort({ timestamp: -1 });
    console.log(`üìç ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á ${locations.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
    
    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• POIs ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    const pois = await POI.find();
    console.log(`üè¢ ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà ${pois.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
    
    // ‡∏à‡∏∏‡∏î‡∏£‡∏±‡∏ö‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì (Receiver) - ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ï‡∏≤‡∏°‡∏ï‡∏∂‡∏Å‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå ‡∏ä‡∏±‡πâ‡∏ô 11
    const receiver = {
      latitude: 9.085311643852359,
      longitude: 99.36704889656512,
      height: 11 * 3 // ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì 3 ‡πÄ‡∏°‡∏ï‡∏£‡∏ï‡πà‡∏≠‡∏ä‡∏±‡πâ‡∏ô = 33 ‡πÄ‡∏°‡∏ï‡∏£
    };
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì LoRa ‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á
    const loraSignals = [];
    
    for (const location of locations) {
      // ‡πÅ‡∏õ‡∏•‡∏á‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏à‡∏≤‡∏Å MongoDB [longitude, latitude] ‡πÄ‡∏õ‡πá‡∏ô {latitude, longitude}
      const latitude = location.location.coordinates[1];
      const longitude = location.location.coordinates[0];
      
      // ‡∏´‡∏≤‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡∏à‡∏≤‡∏Å‡∏à‡∏∏‡∏î‡∏£‡∏±‡∏ö‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì
      const distanceMeters = calculateDistance(
        receiver.latitude, 
        receiver.longitude, 
        latitude, 
        longitude
      );
      
      // ‡∏´‡∏≤‡∏à‡∏∏‡∏î‡∏™‡∏ô‡πÉ‡∏à (POI) ‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
      let nearestPOI = null;
      let minDistance = Infinity;
      
      for (const poi of pois) {
        const poiLatitude = poi.location.coordinates[1];
        const poiLongitude = poi.location.coordinates[0];
        
        const poiDistance = calculateDistance(
          latitude, 
          longitude, 
          poiLatitude, 
          poiLongitude
        );
        
        if (poiDistance < minDistance) {
          minDistance = poiDistance;
          nearestPOI = poi;
        }
      }
      
      // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏£‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì
      const hasHeightAdvantage = receiver.height > 10; // ‡∏ñ‡πâ‡∏≤‡∏ï‡∏±‡∏ß‡∏£‡∏±‡∏ö‡∏≠‡∏¢‡∏π‡πà‡∏™‡∏π‡∏á‡∏Å‡∏ß‡πà‡∏≤ 10 ‡πÄ‡∏°‡∏ï‡∏£
      const signalStrength = calculateSignalStrength(distanceMeters, hasHeightAdvantage);
      
      // ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì
      const { quality, description } = evaluateSignalQuality(signalStrength);
      
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì LoRa
      const loraSignal = {
        location: {
          type: 'Point',
          coordinates: [longitude, latitude]
        },
        locationName: nearestPOI ? nearestPOI.name : `‡∏û‡∏¥‡∏Å‡∏±‡∏î ${latitude.toFixed(6)}, ${longitude.toFixed(6)}`,
        timestamp: location.timestamp,
        signalStrength,
        signalQuality: quality,
        signalDescription: description,
        distanceMeters: Math.round(distanceMeters),
        nearestPOI: nearestPOI ? nearestPOI._id : null,
        poiDistance: Math.round(minDistance)
      };
      
      loraSignals.push(loraSignal);
    }
    
    console.log(`‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì LoRa ${loraSignals.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
    
    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    await LoraSignal.deleteMany({}); // ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏î‡∏¥‡∏°
    await LoraSignal.insertMany(loraSignals);
    
    console.log('‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì LoRa ‡∏•‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß');
    
    // ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå
    const analysis = {
      totalSignals: loraSignals.length,
      averageSignalStrength: loraSignals.reduce((sum, signal) => sum + signal.signalStrength, 0) / loraSignals.length,
      qualityBreakdown: {
        excellent: loraSignals.filter(signal => signal.signalQuality === '‡∏î‡∏µ‡∏°‡∏≤‡∏Å').length,
        good: loraSignals.filter(signal => signal.signalQuality === '‡∏î‡∏µ').length,
        moderate: loraSignals.filter(signal => signal.signalQuality === '‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á').length,
        weak: loraSignals.filter(signal => signal.signalQuality === '‡∏≠‡πà‡∏≠‡∏ô').length,
        poor: loraSignals.filter(signal => signal.signalQuality === '‡πÅ‡∏¢‡πà').length
      },
      averageDistance: loraSignals.reduce((sum, signal) => sum + signal.distanceMeters, 0) / loraSignals.length
    };
    
    console.log('üìä ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå:');
    console.log(JSON.stringify(analysis, null, 2));
    
    return {
      success: true,
      data: loraSignals,
      analysis
    };
  } catch (error) {
    console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì LoRa:', error);
    return {
      success: false,
      error: error.message
    };
  }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
async function seedPOIs() {
  try {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• POI ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const count = await POI.countDocuments();
    if (count > 0) {
      console.log(`üè¢ ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà ${count} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô`);
      return;
    }

    // ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
    const initialPOIs = [
      {
        name: "‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£‡∏Ñ‡∏ì‡∏∞‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå",
        description: "‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£‡∏Ñ‡∏ì‡∏∞‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå‡πÅ‡∏•‡∏∞‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ ‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢‡∏£‡∏≤‡∏ä‡∏†‡∏±‡∏è‡∏™‡∏∏‡∏£‡∏≤‡∏©‡∏é‡∏£‡πå‡∏ò‡∏≤‡∏ô‡∏µ",
        location: {
          type: "Point",
          coordinates: [99.36680712084552, 9.085161175082991]
        },
        category: "building"
      },
      {
        name: "‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£‡∏Ñ‡∏ì‡∏∞‡∏Ñ‡∏£‡∏∏‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå",
        description: "‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£‡∏Ñ‡∏ì‡∏∞‡∏Ñ‡∏£‡∏∏‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå ‡∏™‡∏≥‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô",
        location: {
          type: "Point",
          coordinates: [99.36614710125723, 9.081924936641594]
        },
        category: "building"
      },
      {
        name: "‡πÇ‡∏£‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£",
        description: "‡πÇ‡∏£‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏´‡∏•‡∏±‡∏Å ‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢‡∏£‡∏≤‡∏ä‡∏†‡∏±‡∏è‡∏™‡∏∏‡∏£‡∏≤‡∏©‡∏é‡∏£‡πå‡∏ò‡∏≤‡∏ô‡∏µ",
        location: {
          type: "Point",
          coordinates: [99.36151359799585, 9.085422144376798]
        },
        category: "restaurant"
      },
      {
        name: "‡∏´‡∏≠‡∏™‡∏°‡∏∏‡∏î",
        description: "‡∏´‡∏≠‡∏™‡∏°‡∏∏‡∏î‡∏Å‡∏•‡∏≤‡∏á ‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢‡∏£‡∏≤‡∏ä‡∏†‡∏±‡∏è‡∏™‡∏∏‡∏£‡∏≤‡∏©‡∏é‡∏£‡πå‡∏ò‡∏≤‡∏ô‡∏µ",
        location: {
          type: "Point",
          coordinates: [99.36067355365874, 9.083974775846071]
        },
        category: "building"
      },
      {
        name: "‡∏™‡∏ô‡∏≤‡∏°‡∏Å‡∏µ‡∏¨‡∏≤",
        description: "‡∏™‡∏ô‡∏≤‡∏°‡∏Å‡∏µ‡∏¨‡∏≤‡∏Å‡∏•‡∏≤‡∏á ‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢‡∏£‡∏≤‡∏ä‡∏†‡∏±‡∏è‡∏™‡∏∏‡∏£‡∏≤‡∏©‡∏é‡∏£‡πå‡∏ò‡∏≤‡∏ô‡∏µ",
        location: {
          type: "Point",
          coordinates: [99.3648378021075, 9.080826775139359]
        },
        category: "landmark"
      },
      {
        name: "‡∏ï‡∏∂‡∏Å‡∏ó‡∏µ‡∏õ‡∏±‡∏á‡∏Å‡∏≠‡∏ô‡∏£‡∏±‡∏®‡∏°‡∏µ‡πÇ‡∏ä‡∏ï‡∏¥",
        description: "‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£‡∏ó‡∏µ‡∏õ‡∏±‡∏á‡∏Å‡∏≠‡∏ô‡∏£‡∏±‡∏®‡∏°‡∏µ‡πÇ‡∏ä‡∏ï‡∏¥ ‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢‡∏£‡∏≤‡∏ä‡∏†‡∏±‡∏è‡∏™‡∏∏‡∏£‡∏≤‡∏©‡∏é‡∏£‡πå‡∏ò‡∏≤‡∏ô‡∏µ",
        location: {
          type: "Point",
          coordinates: [99.366150, 9.083262]
        },
        category: "building"
      },
      {
        name: "‡∏ï‡∏∂‡∏Å‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏á",
        description: "‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏á ‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢‡∏£‡∏≤‡∏ä‡∏†‡∏±‡∏è‡∏™‡∏∏‡∏£‡∏≤‡∏©‡∏é‡∏£‡πå‡∏ò‡∏≤‡∏ô‡∏µ",
        location: {
          type: "Point",
          coordinates: [99.366110, 9.083069]
        },
        category: "building"
      }
    ];

    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    const result = await POI.insertMany(initialPOIs);
    console.log(`‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô ${result.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`);
  } catch (error) {
    console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô:', error);
  }
}

// ‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á Express API
const app = express();
app.use(cors());
app.use(express.json());

// API endpoint ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì LoRa
app.get('/api/lora-signals', async (req, res) => {
  try {
    const loraSignals = await LoraSignal.find()
      .sort({ timestamp: -1 })
      .populate('nearestPOI');
    
    res.json({
      success: true,
      count: loraSignals.length,
      data: loraSignals
    });
  } catch (error) {
    console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì LoRa:', error);
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

// API endpoint ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏û‡∏¥‡∏Å‡∏±‡∏î
app.post('/api/save-coordinates', async (req, res) => {
  try {
    // ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏î‡∏¥‡∏° ‡πÅ‡∏•‡∏∞‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà
    const { 
      latitude, 
      longitude, 
      locationName, 
      name, // ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö name ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
      speed = 0, 
      category: reqCategory // ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö category ‡∏à‡∏≤‡∏Å request
    } = req.body;
    
    // ‡πÉ‡∏ä‡πâ name ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏Å‡πá‡πÉ‡∏ä‡πâ locationName
    const locationNameToUse = name || locationName;
    // ‡πÉ‡∏ä‡πâ category ‡∏à‡∏≤‡∏Å request ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
    const categoryToUse = reqCategory || 'other';
    
    if (!latitude || !longitude) {
      return res.status(400).json({
        success: false,
        error: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏Ñ‡πà‡∏≤ latitude ‡πÅ‡∏•‡∏∞ longitude'
      });
    }
    
    console.log(`üìç ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏û‡∏¥‡∏Å‡∏±‡∏î: ${latitude}, ${longitude}${locationNameToUse ? ` (${locationNameToUse})` : ''}`);
    
    // ‡∏´‡∏≤‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
    const nearestPOI = await findNearestPOI(latitude, longitude);
    
    // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà
    let locName = `‡∏û‡∏¥‡∏Å‡∏±‡∏î ${latitude.toFixed(6)}, ${longitude.toFixed(6)}`;
    
    // ‡∏ñ‡πâ‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏≤ ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠‡∏ô‡∏±‡πâ‡∏ô
    if (locationNameToUse && locationNameToUse.trim() !== '') {
      locName = locationNameToUse.trim();
      
      // ‡∏´‡∏≤‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡πÉ‡∏´‡πâ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏õ‡πá‡∏ô POI ‡πÉ‡∏´‡∏°‡πà
      if (!nearestPOI || (nearestPOI && nearestPOI.name !== locName)) {
        const existingPOI = await POI.findOne({ name: locName });
        
        if (!existingPOI) {
          // ‡∏™‡∏£‡πâ‡∏≤‡∏á POI ‡πÉ‡∏´‡∏°‡πà
          const newPOI = new POI({
            name: locName,
            description: `‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÇ‡∏î‡∏¢‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô`,
            location: {
              type: 'Point',
              coordinates: [longitude, latitude]
            },
            category: categoryToUse // ‡πÉ‡∏ä‡πâ category ‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤
          });
          
          await newPOI.save();
          console.log(`‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏´‡∏°‡πà: ${locName}`);
        }
      }
    } else if (nearestPOI) {
      // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà ‡πÅ‡∏ï‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏Å‡∏•‡πâ‡∏Å‡∏±‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
      locName = `‡∏ö‡∏£‡∏¥‡πÄ‡∏ß‡∏ì${nearestPOI.name}`;
    }
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÉ‡∏´‡∏°‡πà
    const newLocation = new Location({
      location: {
        type: 'Point',
        coordinates: [longitude, latitude] // MongoDB ‡πÉ‡∏ä‡πâ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö [longitude, latitude]
      },
      timestamp: new Date(),
      additionalInfo: {
        name: locName,
        category: categoryToUse, // ‡πÉ‡∏ä‡πâ category ‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤
        speed: speed || 0, // ‡πÉ‡∏ä‡πâ speed ‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤ ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ 0 ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ
        altitude: 0,
        satellites: 0,
        heading: 0,
        accuracy: 0,
        battery: 100
      }
    });
    
    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    await newLocation.save();
    
    // ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà
    await analyzeLoraSignals();
    
    res.json({
      success: true,
      message: '‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à'
    });
  } catch (error) {
    console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏û‡∏¥‡∏Å‡∏±‡∏î:', error);
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

// API endpoint ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì LoRa
app.post('/api/analyze-lora-signals', async (req, res) => {
  try {
    const result = await analyzeLoraSignals();
    res.json(result);
  } catch (error) {
    console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì LoRa:', error);
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏≤‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
async function findNearestPOI(latitude, longitude) {
  try {
    // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ POI ‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
    const pois = await POI.find();
    if (pois.length === 0) return null;
    
    let nearestPOI = null;
    let minDistance = Infinity;
    
    for (const poi of pois) {
      const poiLatitude = poi.location.coordinates[1];
      const poiLongitude = poi.location.coordinates[0];
      
      const poiDistance = calculateDistance(
        latitude, 
        longitude, 
        poiLatitude, 
        poiLongitude
      );
      
      if (poiDistance < minDistance) {
        minDistance = poiDistance;
        nearestPOI = poi;
      }
    }
    
    // ‡∏ñ‡πâ‡∏≤‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 300 ‡πÄ‡∏°‡∏ï‡∏£ ‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ö‡∏£‡∏¥‡πÄ‡∏ß‡∏ì‡πÉ‡∏î
    if (minDistance > 300) {
      return null;
    }
    
    return nearestPOI;
  } catch (error) {
    console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏´‡∏≤‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î:', error);
    return null;
  }
}

// ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå
const PORT = process.env.PORT || 3001;
app.listen(PORT, async () => {
  console.log(`‚úÖ ‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏û‡∏≠‡∏£‡πå‡∏ï ${PORT}`);
  
  // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
  await seedPOIs();
  
  console.log('üì° ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì LoRa ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥...');
  await analyzeLoraSignals();
});

module.exports = {
  analyzeLoraSignals,
  calculateSignalStrength,
  evaluateSignalQuality
}; 