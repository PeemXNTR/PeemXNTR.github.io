require('dotenv').config();
const express = require('express');
const mongoose = require('mongoose');
const cors = require('cors');
const app = express();

// Middleware
app.use(express.json());
app.use(cors());

// MongoDB connection
const connectDB = async () => {
  try {
    console.log("üì° Attempting to connect to MongoDB...");
    console.log("üîó URI:", process.env.MONGO_URI);
    
    await mongoose.connect(process.env.MONGO_URI, {
      useNewUrlParser: true,
      useUnifiedTopology: true,
    });
    console.log("‚úÖ MongoDB Connected Successfully");
  } catch (error) {
    console.error("‚ùå MongoDB Connection Error:", error.message);
    process.exit(1);
  }
};

// ‡∏™‡∏£‡πâ‡∏≤‡∏á Schema ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥
const LocationSchema = new mongoose.Schema({
  location: {
    type: {
      type: String,
      enum: ['Point'],
      required: true
    },
    coordinates: {
      type: [Number], // [longitude, latitude]
      required: true
    }
  },
  timestamp: { type: Date, default: Date.now },
  additionalInfo: {
    type: Map,
    of: mongoose.Schema.Types.Mixed,
    default: {}
  }
});

// ‡πÄ‡∏û‡∏¥‡πà‡∏° Geospatial Index
LocationSchema.index({ location: '2dsphere' });

const Location = mongoose.model('Location', LocationSchema);

// ‡∏™‡∏£‡πâ‡∏≤‡∏á Schema ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç (Points of Interest)
const POISchema = new mongoose.Schema({
  name: {
    type: String,
    required: true,
    unique: true
  },
  description: {
    type: String,
    default: ''
  },
  location: {
    type: {
      type: String,
      enum: ['Point'],
      required: true
    },
    coordinates: {
      type: [Number], // [longitude, latitude]
      required: true
    }
  },
  category: {
    type: String,
    enum: ['building', 'landmark', 'restaurant', 'office', 'parking', 'other'],
    default: 'other'
  },
  // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà
  details: {
    type: Map,
    of: mongoose.Schema.Types.Mixed,
    default: {}
  },
  createdAt: { type: Date, default: Date.now }
});

// ‡πÄ‡∏û‡∏¥‡πà‡∏° Geospatial Index ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö POI
POISchema.index({ location: '2dsphere' });

const POI = mongoose.model('POI', POISchema);

// ‡πÄ‡∏û‡∏¥‡πà‡∏° middleware ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Longdo Map API key
const validateLongdoMapKey = (req, res, next) => {
  const apiKey = process.env.REACT_APP_LONGDO_MAP_KEY;
  if (!apiKey) {
    console.error('‚ùå Longdo Map API key is not configured');
    return res.status(500).json({ error: 'Map service configuration error' });
  }
  next();
};

// ‡πÉ‡∏ä‡πâ middleware ‡∏Å‡∏±‡∏ö routes ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà
app.use('/api/locations', validateLongdoMapKey);

// ‡∏™‡∏£‡πâ‡∏≤‡∏á map ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á
const lastLocationSaveTime = new Map();

// API Endpoints
// 1. ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÉ‡∏´‡∏°‡πà
app.post('/api/locations', async (req, res) => {
  try {
    console.log('üì• Received location data:', req.body);
    
    const { latitude, longitude, additionalInfo } = req.body;
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ñ‡πà‡∏≤ latitude ‡πÅ‡∏•‡∏∞ longitude ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
    if (latitude === undefined || longitude === undefined || isNaN(Number(latitude)) || isNaN(Number(longitude))) {
      return res.status(400).json({ 
        error: 'Invalid location data',
        message: 'Latitude and longitude are required and must be valid numbers'
      });
    }
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á key ‡∏à‡∏≤‡∏Å‡∏û‡∏¥‡∏Å‡∏±‡∏î
    const locationKey = `${latitude.toFixed(6)},${longitude.toFixed(6)}`;
    const now = Date.now();
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏£
    const minTimeBetweenSaves = 5000; // 5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ (5000 ‡∏°‡∏¥‡∏•‡∏•‡∏¥‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)
    if (lastLocationSaveTime.has(locationKey)) {
      const lastSaveTime = lastLocationSaveTime.get(locationKey);
      const timeSinceLastSave = now - lastSaveTime;
      
      if (timeSinceLastSave < minTimeBetweenSaves) {
        console.log(`‚ÑπÔ∏è Throttling location save. Last saved ${timeSinceLastSave}ms ago.`);
        return res.status(200).json({
          message: 'Throttled due to frequent updates',
          nextAllowedSaveIn: minTimeBetweenSaves - timeSinceLastSave
        });
      }
    }
    
    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ã‡πâ‡∏≥‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏õ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏ô‡∏≤‡∏ô‡∏°‡∏≤‡∏ô‡∏µ‡πâ)
    const recentTimeThreshold = new Date();
    recentTimeThreshold.setSeconds(recentTimeThreshold.getSeconds() - 10); // 10 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á
    
    const existingLocation = await Location.findOne({
      'location.coordinates': [Number(longitude), Number(latitude)],
      timestamp: { $gte: recentTimeThreshold }
    });
    
    if (existingLocation) {
      console.log('‚ÑπÔ∏è Skip duplicate location data (same coordinates within last 10 seconds)');
      return res.status(200).json({ 
        message: 'Skip duplicate location',
        existing: existingLocation
      });
    }
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á‡∏°‡∏≤‡∏Å‡πÜ ‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏Å‡∏•‡πâ‡∏Å‡∏±‡∏ô (near duplicate)
    const nearbyExistingLocation = await Location.findOne({
      location: {
        $near: {
          $geometry: {
            type: 'Point',
            coordinates: [Number(longitude), Number(latitude)]
          },
          $maxDistance: 5 // ‡∏´‡πà‡∏≤‡∏á‡∏Å‡∏±‡∏ô‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 5 ‡πÄ‡∏°‡∏ï‡∏£
        }
      },
      timestamp: { $gte: recentTimeThreshold }
    });
    
    if (nearbyExistingLocation) {
      console.log('‚ÑπÔ∏è Skip near-duplicate location data (within 5 meters in the last 10 seconds)');
      return res.status(200).json({ 
        message: 'Skip near-duplicate location',
        existing: nearbyExistingLocation
      });
    }
    
    const newLocation = new Location({
      location: {
        type: 'Point',
        coordinates: [Number(longitude), Number(latitude)] // MongoDB ‡πÄ‡∏Å‡πá‡∏ö‡∏û‡∏¥‡∏Å‡∏±‡∏î‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö [longitude, latitude]
      },
      timestamp: new Date(),
      additionalInfo: additionalInfo || {}
    });

    const savedLocation = await newLocation.save();
    console.log('‚úÖ Location saved:', savedLocation);
    
    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏ß‡∏•‡∏≤‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏ô‡∏µ‡πâ
    lastLocationSaveTime.set(locationKey, now);
    
    res.status(201).json(savedLocation);
  } catch (error) {
    console.error('‚ùå Error saving location:', error);
    res.status(500).json({ 
      error: 'Failed to save location',
      details: error.message 
    });
  }
});

// 2. ‡∏î‡∏∂‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
app.get('/api/locations', async (req, res) => {
  try {
    console.log('üì§ Fetching locations...');
    const locations = await Location.find().sort({ timestamp: -1 });
    console.log(`‚úÖ Found ${locations.length} locations`);
    res.json({
      count: locations.length,
      data: locations
    });
  } catch (error) {
    console.error('‚ùå Error fetching locations:', error);
    res.status(500).json({ 
      error: 'Failed to fetch locations',
      details: error.message 
    });
  }
});

// 3. ‡∏•‡∏ö‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ï‡∏≤‡∏° ID
app.delete('/api/locations/:id', async (req, res) => {
  try {
    const deletedLocation = await Location.findByIdAndDelete(req.params.id);
    if (!deletedLocation) {
      return res.status(404).json({ error: 'Location not found' });
    }
    res.json({ message: 'Location deleted successfully' });
  } catch (error) {
    console.error('Error deleting location:', error);
    res.status(500).json({ error: 'Failed to delete location' });
  }
});

// ‡πÄ‡∏û‡∏¥‡πà‡∏° endpoint ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö API key
app.get('/api/map-config', (req, res) => {
  const apiKey = process.env.REACT_APP_LONGDO_MAP_KEY;
  if (!apiKey) {
    return res.status(500).json({ error: 'Map API key not configured' });
  }
  res.json({ 
    status: 'ok',
    mapApiConfigured: true
  });
});

// ‡πÄ‡∏û‡∏¥‡πà‡∏° route ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
app.get('/api/health', (req, res) => {
  res.json({ 
    status: 'ok',
    mongodb: mongoose.connection.readyState === 1 ? 'connected' : 'disconnected',
    timestamp: new Date()
  });
});

// ‡πÄ‡∏û‡∏¥‡πà‡∏° API Endpoints ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Geospatial Queries

// 4. ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏±‡∏®‡∏°‡∏µ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î (Near)
app.get('/api/locations/near', async (req, res) => {
  try {
    const { lng, lat, maxDistance = 1000, minDistance = 0 } = req.query;
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå
    if (!lng || !lat || isNaN(Number(lng)) || isNaN(Number(lat))) {
      return res.status(400).json({
        error: 'Invalid parameters',
        message: 'Longitude (lng) and latitude (lat) are required and must be valid numbers'
      });
    }
    
    console.log(`üîç Searching locations near [${lng}, ${lat}] within ${maxDistance} meters`);
    
    const locations = await Location.find({
      location: {
        $near: {
          $geometry: {
            type: 'Point',
            coordinates: [Number(lng), Number(lat)]
          },
          $minDistance: Number(minDistance),
          $maxDistance: Number(maxDistance)
        }
      }
    });
    
    console.log(`‚úÖ Found ${locations.length} locations near the specified point`);
    res.json({
      count: locations.length,
      center: { lng, lat },
      maxDistance,
      minDistance,
      data: locations
    });
  } catch (error) {
    console.error('‚ùå Error in near query:', error);
    res.status(500).json({
      error: 'Failed to execute near query',
      details: error.message
    });
  }
});

// 5. ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏µ‡πà‡∏¢‡∏° (Within)
app.get('/api/locations/within', async (req, res) => {
  try {
    const { swLng, swLat, neLng, neLat } = req.query;
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå
    if (!swLng || !swLat || !neLng || !neLat || 
        isNaN(Number(swLng)) || isNaN(Number(swLat)) || 
        isNaN(Number(neLng)) || isNaN(Number(neLat))) {
      return res.status(400).json({
        error: 'Invalid parameters',
        message: 'Southwest and northeast coordinates are required and must be valid numbers'
      });
    }
    
    console.log(`üîç Searching locations within box: SW[${swLng}, ${swLat}], NE[${neLng}, ${neLat}]`);
    
    const locations = await Location.find({
      location: {
        $geoWithin: {
          $box: [
            [Number(swLng), Number(swLat)], // Southwest corner
            [Number(neLng), Number(neLat)]  // Northeast corner
          ]
        }
      }
    });
    
    console.log(`‚úÖ Found ${locations.length} locations within the specified box`);
    res.json({
      count: locations.length,
      bounds: {
        southwest: { lng: swLng, lat: swLat },
        northeast: { lng: neLng, lat: neLat }
      },
      data: locations
    });
  } catch (error) {
    console.error('‚ùå Error in within query:', error);
    res.status(500).json({
      error: 'Failed to execute within query',
      details: error.message
    });
  }
});

// 6. ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏´‡∏•‡∏≤‡∏¢‡πÄ‡∏´‡∏•‡∏µ‡πà‡∏¢‡∏° (Polygon)
app.post('/api/locations/within-polygon', async (req, res) => {
  try {
    const { polygon } = req.body;
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå
    if (!polygon || !Array.isArray(polygon) || polygon.length < 3) {
      return res.status(400).json({
        error: 'Invalid polygon',
        message: 'Polygon must be an array of at least 3 coordinates (format: [[lng1, lat1], [lng2, lat2], ...])' 
      });
    }
    
    console.log(`üîç Searching locations within polygon with ${polygon.length} points`);
    
    // ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: polygon ‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏¥‡∏î (‡∏à‡∏∏‡∏î‡πÅ‡∏£‡∏Å‡πÅ‡∏•‡∏∞‡∏à‡∏∏‡∏î‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏à‡∏∏‡∏î‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô)
    let polygonCoordinates = [...polygon];
    if (JSON.stringify(polygonCoordinates[0]) !== JSON.stringify(polygonCoordinates[polygonCoordinates.length - 1])) {
      polygonCoordinates.push(polygonCoordinates[0]);
    }
    
    const locations = await Location.find({
      location: {
        $geoWithin: {
          $geometry: {
            type: 'Polygon',
            coordinates: [polygonCoordinates]
          }
        }
      }
    });
    
    console.log(`‚úÖ Found ${locations.length} locations within the polygon`);
    res.json({
      count: locations.length,
      polygon: polygonCoordinates,
      data: locations
    });
  } catch (error) {
    console.error('‚ùå Error in polygon query:', error);
    res.status(500).json({
      error: 'Failed to execute polygon query',
      details: error.message
    });
  }
});

// 7. API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏û‡∏¥‡πà‡∏° Point of Interest (POI)
app.post('/api/poi', async (req, res) => {
  try {
    const { name, description, latitude, longitude, category, details } = req.body;
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå
    if (!name || !latitude || !longitude || isNaN(Number(latitude)) || isNaN(Number(longitude))) {
      return res.status(400).json({
        error: 'Invalid POI data',
        message: 'Name, latitude, and longitude are required and coordinates must be valid numbers'
      });
    }
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ä‡∏∑‡πà‡∏≠ POI ‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const existingPOI = await POI.findOne({ name });
    if (existingPOI) {
      return res.status(400).json({
        error: 'Duplicate POI',
        message: `A POI with the name "${name}" already exists`
      });
    }
    
    const newPOI = new POI({
      name,
      description: description || '',
      location: {
        type: 'Point',
        coordinates: [Number(longitude), Number(latitude)]
      },
      category: category || 'other',
      details: details || {}
    });
    
    const savedPOI = await newPOI.save();
    console.log('‚úÖ POI saved:', savedPOI);
    
    res.status(201).json(savedPOI);
  } catch (error) {
    console.error('‚ùå Error saving POI:', error);
    res.status(500).json({
      error: 'Failed to save POI',
      details: error.message
    });
  }
});

// 8. API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• POI ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
app.get('/api/poi', async (req, res) => {
  try {
    const { category } = req.query;
    let query = {};
    
    if (category) {
      query.category = category;
    }
    
    const pois = await POI.find(query).sort({ name: 1 });
    console.log(`‚úÖ Found ${pois.length} POIs`);
    
    res.json({
      count: pois.length,
      data: pois
    });
  } catch (error) {
    console.error('‚ùå Error fetching POIs:', error);
    res.status(500).json({
      error: 'Failed to fetch POIs',
      details: error.message
    });
  }
});

// 9. API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ POI ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
app.get('/api/poi/near', async (req, res) => {
  try {
    const { lng, lat, maxDistance = 500, limit = 5 } = req.query;
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå
    if (!lng || !lat || isNaN(Number(lng)) || isNaN(Number(lat))) {
      return res.status(400).json({
        error: 'Invalid parameters',
        message: 'Longitude (lng) and latitude (lat) are required and must be valid numbers'
      });
    }
    
    console.log(`üîç Searching POIs near [${lng}, ${lat}] within ${maxDistance} meters`);
    
    const nearbyPOIs = await POI.find({
      location: {
        $near: {
          $geometry: {
            type: 'Point',
            coordinates: [Number(lng), Number(lat)]
          },
          $maxDistance: Number(maxDistance)
        }
      }
    }).limit(Number(limit));
    
    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞ POI
    const poisWithDistance = nearbyPOIs.map(poi => {
      // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏£‡πà‡∏≤‡∏ß‡πÜ ‡∏î‡πâ‡∏ß‡∏¢ haversine formula
      const [poiLng, poiLat] = poi.location.coordinates;
      const distance = calculateDistance(Number(lat), Number(lng), poiLat, poiLng);
      
      return {
        ...poi.toObject(),
        distance: {
          meters: Math.round(distance * 1000),
          kilometers: distance.toFixed(2)
        }
      };
    });
    
    console.log(`‚úÖ Found ${poisWithDistance.length} POIs near the specified point`);
    res.json({
      count: poisWithDistance.length,
      center: { lng, lat },
      maxDistance,
      data: poisWithDistance
    });
  } catch (error) {
    console.error('‚ùå Error in near POI query:', error);
    res.status(500).json({
      error: 'Failed to execute near POI query',
      details: error.message
    });
  }
});

// 10. API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏à‡∏∞‡∏ñ‡∏∂‡∏á‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
app.get('/api/poi/next-destination', async (req, res) => {
  try {
    const { lng, lat, direction, speed = 0, maxResults = 3 } = req.query;
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå
    if (!lng || !lat || isNaN(Number(lng)) || isNaN(Number(lat))) {
      return res.status(400).json({
        error: 'Invalid parameters',
        message: 'Longitude (lng) and latitude (lat) are required and must be valid numbers'
      });
    }
    
    console.log(`üîç Finding next destination from [${lng}, ${lat}]`);
    
    let query = {
      location: {
        $near: {
          $geometry: {
            type: 'Point',
            coordinates: [Number(lng), Number(lat)]
          },
          $maxDistance: 2000 // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÉ‡∏ô‡∏£‡∏±‡∏®‡∏°‡∏µ 2 ‡∏Å‡∏¥‡πÇ‡∏•‡πÄ‡∏°‡∏ï‡∏£
        }
      }
    };
    
    // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á ‡πÉ‡∏´‡πâ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÄ‡∏â‡∏û‡∏≤‡∏∞ POI ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏°‡∏∏‡πà‡∏á‡πÑ‡∏õ
    if (direction && !isNaN(Number(direction))) {
      // ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á (‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ó‡∏≥‡πÉ‡∏ô‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡∏µ‡πâ)
      console.log(`Using direction: ${direction} degrees`);
    }
    
    const nearbyPOIs = await POI.find(query).limit(Number(maxResults));
    
    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏Ñ‡∏≤‡∏î‡∏ß‡πà‡∏≤‡∏à‡∏∞‡πÑ‡∏õ‡∏ñ‡∏∂‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
    const currentSpeed = Number(speed) > 0 ? Number(speed) : 30; // ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô 30 ‡∏Å‡∏°./‡∏ä‡∏°. ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏∞‡∏ö‡∏∏
    
    const poisWithETA = nearbyPOIs.map(poi => {
      const [poiLng, poiLat] = poi.location.coordinates;
      const distanceKm = calculateDistance(Number(lat), Number(lng), poiLat, poiLng);
      
      // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏Ñ‡∏≤‡∏î‡∏ß‡πà‡∏≤‡∏à‡∏∞‡πÑ‡∏õ‡∏ñ‡∏∂‡∏á (ETA - Estimated Time of Arrival)
      // ‡∏™‡∏π‡∏ï‡∏£: ‡πÄ‡∏ß‡∏•‡∏≤ (‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á) = ‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á (‡∏Å‡∏°.) / ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß (‡∏Å‡∏°./‡∏ä‡∏°.)
      const timeHours = distanceKm / currentSpeed;
      const timeMinutes = Math.round(timeHours * 60);
      
      return {
        ...poi.toObject(),
        distance: {
          meters: Math.round(distanceKm * 1000),
          kilometers: distanceKm.toFixed(2)
        },
        eta: {
          minutes: timeMinutes,
          seconds: Math.round(timeHours * 3600),
          formatted: timeMinutes <= 1 
            ? '‡πÑ‡∏°‡πà‡∏ñ‡∏∂‡∏á 1 ‡∏ô‡∏≤‡∏ó‡∏µ' 
            : `‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì ${timeMinutes} ‡∏ô‡∏≤‡∏ó‡∏µ`
        }
      };
    });
    
    // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á
    poisWithETA.sort((a, b) => a.distance.meters - b.distance.meters);
    
    console.log(`‚úÖ Found ${poisWithETA.length} potential next destinations`);
    res.json({
      count: poisWithETA.length,
      currentLocation: { lng, lat },
      currentSpeed: `${currentSpeed} km/h`,
      data: poisWithETA
    });
  } catch (error) {
    console.error('‚ùå Error in next destination query:', error);
    res.status(500).json({
      error: 'Failed to find next destination',
      details: error.message
    });
  }
});

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡πà‡∏ô‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏™‡∏≠‡∏á‡∏û‡∏¥‡∏Å‡∏±‡∏î (Haversine formula)
function calculateDistance(lat1, lon1, lat2, lon2) {
  const R = 6371; // ‡∏£‡∏±‡∏®‡∏°‡∏µ‡∏Ç‡∏≠‡∏á‡πÇ‡∏•‡∏Å‡πÉ‡∏ô‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Å‡∏¥‡πÇ‡∏•‡πÄ‡∏°‡∏ï‡∏£
  const dLat = deg2rad(lat2 - lat1);
  const dLon = deg2rad(lon2 - lon1);
  const a = 
    Math.sin(dLat/2) * Math.sin(dLat/2) +
    Math.cos(deg2rad(lat1)) * Math.cos(deg2rad(lat2)) * 
    Math.sin(dLon/2) * Math.sin(dLon/2); 
  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a)); 
  const distance = R * c; // ‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡πÉ‡∏ô‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Å‡∏¥‡πÇ‡∏•‡πÄ‡∏°‡∏ï‡∏£
  return distance;
}

function deg2rad(deg) {
  return deg * (Math.PI/180);
}

// Start server after DB connection
const PORT = process.env.PORT || 5000;
const startServer = async () => {
  await connectDB();
  app.listen(PORT, () => console.log(`Server running on port ${PORT}`));
};

startServer(); 